class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:       
        # Ensure m <= n
        if len(nums1) > len(nums2):
            temp_list = nums1
            nums1 = nums2
            nums2 = temp_list
        A = nums1
        B = nums2
        m = len(A)
        n = len(B)

        iMin, iMax, half_len = 0, m, (m+n+1)/2
        while iMin <= iMax:
            i = int((iMin+iMax)/2)
            j = int(half_len - i)
            # print(i, j)

            if i < m and B[j-1] > A[i]:
                iMin = i+1
            elif i > 0 and A[i-1] > B[j]:
                iMax = i-1
            else:  # 如果严格执行中位数的两个边界条件, 这里会越界
                # i and j is true
                if i == 0:
                    max_of_left = B[j-1]
                elif j == 0:
                    max_of_left = A[i-1]
                else:
                    max_of_left = max(A[i-1], B[j-1])
                if (m+n)%2 == 1:
                    return max_of_left

                if i == m:
                    min_of_right = B[j]
                elif j == n:
                    min_of_right = A[i]
                else:
                    min_of_right = min(A[i], B[j])
                return (max_of_left + min_of_right)/2.0



                


